package io.getstream.feeds.android.client.api.model

import io.getstream.feeds.android.client.internal.model.mapping.toDate
import io.getstream.feeds.android.core.generated.models.Attachment
import io.getstream.feeds.android.core.generated.models.CommentResponse
import io.getstream.feeds.android.core.generated.models.RepliesMeta
import java.util.Date

/**
 * A data model representing a comment in the Stream Feeds system.
 *
 * This class contains all the information about a comment, including its content,
 * metadata, reactions, replies, and user information. It supports threaded comments
 * with nested replies and real-time reaction tracking.
 *
 * Features:
 * - Threaded Comments: Supports nested comment replies
 * - Reactions: Tracks user reactions and reaction counts
 * - Mentions: Supports user mentions with metadata
 * - Attachments: Supports file and media attachments
 * - Moderation: Includes moderation and scoring data
 * - Real-time Updates: Designed for real-time state management
 *
 * @property attachments File attachments associated with the comment. This property contains any
 * files, images, or other media attached to the comment. The attachments are typically used for
 * rich media comments.
 * @property confidenceScore A confidence score indicating the quality or relevance of the comment.
 * This score is typically generated by AI or moderation systems to indicate how confident the
 * system is in the comment's quality or relevance.
 * @property controversyScore A controversy score indicating the potential controversy level of the
 * comment. This score helps identify comments that might be controversial or require additional
 * moderation attention.
 * @property createdAt The date and time when the comment was created.
 * @property custom Custom data associated with the comment. This property allows for storing
 * additional metadata or custom fields specific to your application's needs.
 * @property deletedAt The date and time when the comment was deleted, if applicable. If the comment
 * has been deleted, this property contains the deletion timestamp. If the comment is still active,
 * this property is `null`.
 * @property downvoteCount The number of downvotes received by the comment.
 * @property id The unique identifier of the comment.
 * @property latestReactions The most recent reactions added to the comment. This property contains
 * the latest reactions from users, typically limited to the most recent ones to keep the data size
 * manageable.
 * @property mentionedUsers Users mentioned in the comment. This property contains the list of users
 * who were mentioned in the comment using @mentions or similar functionality.
 * @property meta Metadata about the comment's replies structure. This property contains information
 * about the threading structure of replies such as reply counts and pagination information.
 * @property moderation Moderation state for the comment.
 * @property objectId The ID of the object this comment belongs to (e.g., activity ID).
 * @property objectType The type of object this comment belongs to (e.g., "activity").
 * @property ownReactions All the reactions from the current user.
 * @property parentId The ID of the parent comment, if this is a reply. If this comment is a reply
 * to another comment, this property contains the ID of the parent comment. For top-level comments,
 * this is `null`.
 * @property reactionCount The total number of reactions on the comment. This property tracks the
 * total count of all reactions across all types.
 * @property reactionGroups Groups of reactions by type. This property organizes reactions by their
 * type (e.g., "like", "love", "laugh") and provides counts and metadata for each reaction type.
 * @property replies The replies to this comment, if any. This property contains the nested replies
 * to this comment, supporting threaded comment structures. For comments without replies, this is
 * `null`.
 * @property replyCount The number of replies to this comment. This property tracks the total count
 * of replies, which may be different from the actual number of replies loaded in the `replies`
 * property due to pagination or loading limits.
 * @property score A score assigned to the comment (e.g., relevance, quality). This score is
 * typically used for sorting or ranking comments based on various factors like relevance, quality,
 * or engagement.
 * @property status The current status of the comment.
 * @property text The text content of the comment. This property contains the main text content of
 * the comment. It may be `null` for comments that only contain attachments or other media.
 * @property updatedAt The date and time when the comment was last updated.
 * @property upvoteCount The number of upvotes received by the comment.
 * @property user The user who created the comment.
 */
public data class CommentData(
    val attachments: List<Attachment>?,
    val confidenceScore: Float,
    val controversyScore: Float?,
    val createdAt: Date,
    val custom: Map<String, Any?>?,
    val deletedAt: Date?,
    val downvoteCount: Int,
    val id: String,
    val latestReactions: List<FeedsReactionData>,
    val mentionedUsers: List<UserData>,
    val meta: RepliesMeta?,
    val moderation: Moderation?,
    val objectId: String,
    val objectType: String,
    val ownReactions: List<FeedsReactionData>,
    val parentId: String?,
    val reactionCount: Int,
    val reactionGroups: Map<String, ReactionGroupData>,
    val replies: List<CommentData>?,
    val replyCount: Int,
    val score: Int,
    val status: String,
    val text: String?,
    val updatedAt: Date,
    val upvoteCount: Int,
    val user: UserData
) {
    /**
     * Indicates whether this comment has threaded replies.
     * Returns true if replies are loaded (not null).
     */
    val isThreaded: Boolean
        get() = replies != null
}

/**
 * Converts a [CommentResponse] to a [CommentData] model.
 */
internal fun CommentResponse.toModel(): CommentData = CommentData(
    attachments = attachments,
    confidenceScore = confidenceScore,
    controversyScore = controversyScore,
    createdAt = createdAt.toDate(),
    custom = custom ?: emptyMap(),
    deletedAt = deletedAt?.toDate(),
    downvoteCount = downvoteCount,
    id = id,
    latestReactions = latestReactions?.map { it.toModel() }.orEmpty(),
    mentionedUsers = mentionedUsers.map { it.toModel() },
    meta = null,
    moderation = moderation?.toModel(),
    objectId = objectId,
    objectType = objectType,
    ownReactions = ownReactions.map { it.toModel() },
    parentId = parentId,
    reactionCount = reactionCount,
    reactionGroups = reactionGroups?.mapValues { it.value.toModel() }.orEmpty(),
    replies = null,
    replyCount = replyCount,
    score = score,
    status = status,
    text = text,
    updatedAt = updatedAt.toDate(),
    upvoteCount = upvoteCount,
    user = user.toModel(),
)

