package io.getstream.feeds.android.client.api.model

import io.getstream.feeds.android.client.internal.model.mapping.toDate
import io.getstream.feeds.android.client.internal.utils.upsert
import io.getstream.feeds.android.core.generated.models.Attachment
import io.getstream.feeds.android.core.generated.models.RepliesMeta
import io.getstream.feeds.android.core.generated.models.ThreadedCommentResponse
import java.util.Date

/**
 * A data model representing a threaded comment in the Stream Feeds system.
 *
 * This struct contains all the information about a comment with threaded replies,
 * including its content, metadata, reactions, nested replies, and user information.
 * It supports hierarchical comment structures with pagination metadata.
 *
 * ## Features:
 *
 * - **Threaded Comments**: Supports nested comment replies with hierarchy
 * - **Pagination Metadata**: Includes metadata for pagination and loading states
 * - **Reactions**: Tracks user reactions and reaction counts
 * - **Mentions**: Supports user mentions with metadata
 * - **Attachments**: Supports file and media attachments
 * - **Moderation**: Includes moderation and scoring data
 * - **Real-time Updates**: Designed for real-time state management
 *
 * @property attachments File attachments associated with the comment. This property contains any
 * files, images, or other media attached to the comment. The attachments are typically used for
 * rich media comments.
 * @property confidenceScore A confidence score indicating the quality or relevance of the comment.
 * This score is typically generated by AI or moderation systems to indicate
 * how confident the system is in the comment's quality or relevance.
 * @property controversyScore A controversy score indicating the potential controversy level of the
 * comment. This score helps identify comments that might be controversial or require
 * additional moderation attention.
 * @property createdAt The date and time when the comment was created.
 * @property custom Custom data associated with the comment. This property allows for storing
 * additional metadata or custom fields specific to your application's needs.
 * @property deletedAt The date and time when the comment was deleted, if applicable. If the comment
 * has been deleted, this property contains the deletion timestamp. If the comment is still active,
 * this property is `null`.
 * @property downvoteCount The number of downvotes received by the comment.
 * @property id The unique identifier of the comment.
 * @property latestReactions The most recent reactions added to the comment. This property contains
 * the latest reactions from users, typically limited to the most recent ones to keep the data size
 * manageable.
 * @property mentionedUsers Users mentioned in the comment. This property contains the list of users
 * who were mentioned in the comment using @mentions or similar functionality.
 * @property meta Metadata about the comment's replies structure. This property contains information
 * about the threading structure of replies, such as reply counts, pagination information, and
 * loading states.
 * @property moderation Moderation state for the comment.
 * @property objectId The ID of the object this comment belongs to (e.g., activity ID).
 * @property objectType The type of object this comment belongs to (e.g., "activity").
 * @property ownReactions All the reactions from the current user.
 * @property parentId The ID of the parent comment, if this is a reply. If this comment is a reply
 * to another comment, this property contains the ID of the parent comment. For top-level comments,
 * this is `null`.
 * @property reactionCount The total number of reactions on the comment. This property tracks the
 * total count of all reactions across all types.
 * @property reactionGroups Groups of reactions by type. This property organizes reactions by their
 * type (e.g., "like", "love", "laugh") and provides counts and metadata for each reaction type.
 * @property replies The replies to this comment, if any. This property contains the nested replies
 * to this comment, supporting threaded comment structures.
 * For comments without replies, this is `null`.
 * @property replyCount The number of replies to this comment. This property tracks the total count
 * of replies, which may be different from the actual number of replies loaded in the [replies]
 * property due to pagination or loading limits.
 * @property score A score assigned to the comment (e.g., relevance, quality). This score is
 * typically used for sorting or ranking comments based on various factors like relevance, quality,
 * or engagement.
 * @property status The current status of the comment (e.g., "active", "deleted", "moderated").
 * @property text The text content of the comment. This property contains the main text content of
 * the comment. It may be `null` for comments that only contain attachments or other media.
 * @property updatedAt The date and time when the comment was last updated.
 * @property upvoteCount The number of upvotes received by the comment.
 * * @property user The user who created the comment.
 */
public data class ThreadedCommentData(
    public val attachments: List<Attachment>?, // TODO: Make an Attachment domain model
    public val confidenceScore: Float,
    public val controversyScore: Float?,
    public val createdAt: Date,
    public val custom: Map<String, Any?>?,
    public val deletedAt: Date?,
    public val downvoteCount: Int,
    public val id: String,
    public val latestReactions: List<FeedsReactionData>,
    public val mentionedUsers: List<UserData>,
    public val meta: RepliesMeta?, // TODO: Make a RepliesMeta domain model
    public val moderation: Moderation?,
    public val objectId: String,
    public val objectType: String,
    public val ownReactions: List<FeedsReactionData>,
    public val parentId: String?,
    public val reactionCount: Int,
    public val reactionGroups: Map<String, ReactionGroupData>,
    public val replies: List<ThreadedCommentData>?,
    public val replyCount: Int,
    public val score: Int,
    public val status: String,
    public val text: String?,
    public val updatedAt: Date,
    public val upvoteCount: Int,
    public val user: UserData,
) {

    /**
     * Creates a new instance of [ThreadedCommentData] from a [CommentData] object.
     *
     * This constructor converts a regular comment to a threaded comment,
     * preserving all the comment data while adding support for threaded replies.
     */
    public constructor(comment: CommentData) : this(
        attachments = comment.attachments,
        confidenceScore = comment.confidenceScore,
        controversyScore = comment.controversyScore,
        createdAt = comment.createdAt,
        custom = comment.custom,
        deletedAt = comment.deletedAt,
        downvoteCount = comment.downvoteCount,
        id = comment.id,
        latestReactions = comment.latestReactions,
        mentionedUsers = comment.mentionedUsers,
        meta = null,
        moderation = comment.moderation,
        objectId = comment.objectId,
        objectType = comment.objectType,
        ownReactions = comment.ownReactions,
        parentId = comment.parentId,
        reactionCount = comment.reactionCount,
        reactionGroups = comment.reactionGroups,
        replies = null,
        replyCount = comment.replyCount,
        score = comment.score,
        status = comment.status,
        text = comment.text,
        updatedAt = comment.updatedAt,
        upvoteCount = comment.upvoteCount,
        user = comment.user,
    )
}

/**
 * Adds a reaction to the comment, updating the latest reactions, reaction groups,
 * reaction count, and own reactions if applicable.
 *
 * @param reaction The reaction to add.
 * @param currentUserId The ID of the current user, used to update own reactions.
 * @return A new [ThreadedCommentData] instance with the updated reaction data.
 */
internal fun ThreadedCommentData.addReaction(
    reaction: FeedsReactionData,
    currentUserId: String,
): ThreadedCommentData {
    val updatedLatestReactions = latestReactions.upsert(reaction, FeedsReactionData::id)
    val reactionGroup = this.reactionGroups[reaction.type]
        ?: ReactionGroupData(count = 1, reaction.createdAt, reaction.createdAt)
    val updatedReactionGroup = reactionGroup.increment(reaction.createdAt)
    val updatedReactionGroups = this.reactionGroups.toMutableMap().apply {
        this[reaction.type] = updatedReactionGroup
    }
    val updatedReactionCount = updatedReactionGroups.values.sumOf(ReactionGroupData::count)
    val updatedOwnReactions = if (reaction.user.id == currentUserId) {
        ownReactions.upsert(reaction, FeedsReactionData::id)
    } else {
        ownReactions
    }
    return this.copy(
        latestReactions = updatedLatestReactions,
        reactionGroups = updatedReactionGroups,
        reactionCount = updatedReactionCount,
        ownReactions = updatedOwnReactions,
    )
}

/**
 * Removes a reaction from the comment, updating the latest reactions, reaction groups,
 * reaction count, and own reactions if applicable.
 *
 * @param reaction The reaction to remove.
 * @param currentUserId The ID of the current user, used to update own reactions.
 * @return A new [ThreadedCommentData] instance with the updated reaction data.
 */
internal fun ThreadedCommentData.removeReaction(
    reaction: FeedsReactionData,
    currentUserId: String,
): ThreadedCommentData {
    val updatedLatestReactions = this.latestReactions.filter { it.id != reaction.id }
    val updatedOwnReactions = if (reaction.user.id == currentUserId) {
        this.ownReactions.filter { it.id != reaction.id }
    } else {
        this.ownReactions
    }
    val reactionGroup = this.reactionGroups[reaction.type]
    if (reactionGroup == null) {
        // If there is no reaction group for this type, just update latest and own reactions.
        // Note: This is only a hypothetical case, as we should always have a reaction group.
        return this.copy(
            latestReactions = updatedLatestReactions,
            ownReactions = updatedOwnReactions,
        )
    }
    val updatedReactionGroup = reactionGroup.decrement(reaction.createdAt)
    val updatedReactionGroups = if (updatedReactionGroup.isEmpty) {
        this.reactionGroups - reaction.type // Remove empty group
    } else {
        this.reactionGroups.toMutableMap().apply {
            this[reaction.type] = updatedReactionGroup
        }
    }
    val updatedReactionCount = updatedReactionGroups.values.sumOf(ReactionGroupData::count)
    return this.copy(
        latestReactions = updatedLatestReactions,
        reactionGroups = updatedReactionGroups,
        reactionCount = updatedReactionCount,
        ownReactions = updatedOwnReactions,
    )
}

/**
 * Adds a reply to the comment, updating the replies list and reply count.
 *
 * @param comment The reply comment to add.
 * @return A new [ThreadedCommentData] instance with the updated replies and reply count.
 */
internal fun ThreadedCommentData.addReply(comment: ThreadedCommentData): ThreadedCommentData {
    val replies = this.replies.orEmpty().upsert(comment, ThreadedCommentData::id)
    val replyCount = this.replyCount + 1
    return this.copy(
        replies = replies,
        replyCount = replyCount,
    )
}

/**
 * Removes a reply from the comment, updating the replies list and reply count.
 *
 * @param comment The reply comment to remove.
 * @return A new [ThreadedCommentData] instance with the updated replies and reply count.
 */
internal fun ThreadedCommentData.removeReply(comment: ThreadedCommentData): ThreadedCommentData {
    val replies = this.replies.orEmpty().filter { it.id != comment.id }
    val replyCount = this.replyCount - 1
    return this.copy(
        replies = replies,
        replyCount = replyCount,
    )
}

/**
 * Replaces an existing reply in the comment with a new one, updating the replies list.
 *
 * @param comment The new reply comment to replace the existing one.
 * @return A new [ThreadedCommentData] instance with the updated replies.
 */
internal fun ThreadedCommentData.replaceReply(comment: ThreadedCommentData): ThreadedCommentData {
    val replies = this.replies.orEmpty().map {
        if (it.id == comment.id) {
            comment
        } else {
            it
        }
    }
    return this.copy(replies = replies)
}

/**
 * Sets the comment data for this threaded comment, replacing its properties with those from the
 * provided [CommentData].
 * The [ThreadedCommentData.meta] and [ThreadedCommentData.replies] properties are preserved from
 * the original instance.
 *
 * @param comment The [CommentData] to set for this threaded comment.
 * @return A new [ThreadedCommentData] instance with the updated comment data.
 */
internal fun ThreadedCommentData.setCommentData(comment: CommentData): ThreadedCommentData {
    return this.copy(
        attachments = comment.attachments,
        confidenceScore = comment.confidenceScore,
        controversyScore = comment.controversyScore,
        createdAt = comment.createdAt,
        custom = comment.custom,
        deletedAt = comment.deletedAt,
        downvoteCount = comment.downvoteCount,
        id = comment.id,
        latestReactions = comment.latestReactions,
        mentionedUsers = comment.mentionedUsers,
        meta = this.meta,
        moderation = comment.moderation,
        objectId = comment.objectId,
        objectType = comment.objectType,
        ownReactions = comment.ownReactions,
        parentId = comment.parentId,
        reactionCount = comment.reactionCount,
        reactionGroups = comment.reactionGroups,
        replies = this.replies,
        replyCount = comment.replyCount,
        score = comment.score,
        status = comment.status,
        text = comment.text,
        updatedAt = comment.updatedAt,
        upvoteCount = comment.upvoteCount,
        user = comment.user
    )
}

/**
 * Converts a [ThreadedCommentResponse] to a [ThreadedCommentData] model.
 */
internal fun ThreadedCommentResponse.toModel(): ThreadedCommentData = ThreadedCommentData(
    attachments = attachments,
    confidenceScore = confidenceScore,
    controversyScore = controversyScore,
    createdAt = createdAt.toDate(),
    custom = custom,
    deletedAt = deletedAt?.toDate(),
    downvoteCount = downvoteCount,
    id = id,
    latestReactions = latestReactions?.map { it.toModel() }.orEmpty(),
    mentionedUsers = mentionedUsers.map { it.toModel() },
    meta = meta,
    moderation = moderation?.toModel(),
    objectId = objectId,
    objectType = objectType,
    ownReactions = ownReactions.map { it.toModel() },
    parentId = parentId,
    reactionCount = reactionCount,
    reactionGroups = reactionGroups?.mapValues { (_, v) -> v.toModel() }.orEmpty(),
    replies = replies?.map { it.toModel() },
    replyCount = replyCount,
    score = score,
    status = status,
    text = text,
    updatedAt = updatedAt.toDate(),
    upvoteCount = upvoteCount,
    user = user.toModel(),
)
